import streamlit as st
import numpy as np
import tensorflow as tf
import pandas as pd

from lime import lime_image
from PIL import Image
from skimage.segmentation import mark_boundaries

###
### Model loading
###

interpreter = None
input_details = None
output_details = None

try:
    interpreter = tf.lite.Interpreter(model_path="src/model_file/model_quantized.tflite")
    interpreter.allocate_tensors()
    input_details = interpreter.get_input_details()
    output_details = interpreter.get_output_details()
except Exception as e:
    st.error(f"Error: Failed to load the model.")
    st.error(f"Details: {e}")
    st.stop()

###
### Lime predict
###

def predict_func(images: np.ndarray):
    if images.dtype == np.uint8:
        images = images.astype(np.float32) / 255.0
    else:
        images = np.clip(images, 0.0, 1.0).astype(np.float32)

    predictions = []

    for image in images:
        input_data = np.expand_dims(image, axis=0).astype(np.float32)
        interpreter.set_tensor(input_details[0]['index'], input_data)
        interpreter.invoke()
        prediction = interpreter.get_tensor(output_details[0]['index'])
        predictions.append(prediction[0])

    return np.array(predictions)

###
### Streamlit app
###

def render_home():
    st.set_page_config(
        page_title="A.I Image Authenticator",
        page_icon="ðŸ¤–",
    )

    st.markdown("<h1 style='text-align: center; font-size: 48px;'>AI Image Classificator</h1>", unsafe_allow_html=True)

    with st.expander("Description", expanded=True):
        st.write(
            """
            This is a simple web application that uses a pre-trained model to determine whether an image is likely to be generated by A.I. or not.
            """
        )
        st.write(f"So far this model has achieved an accuracy of 90-95% on the data it was trained on. As impressive as it may seem, it is important to note that the model may not perform as well on images that are not similar to the training data.")
        st.write("### How to use")
        st.write(
            """
            1. Upload an image file in PNG or JPEG format.
            2. The model will process the image and provide a prediction.
            3. The result will indicate whether the image is likely to be A.I.-generated or not, along with visualizations for detailed evaluations.
            """
        )

    uploader = st.file_uploader("Choose an image file", type=["png", "jpeg", "jpg"])
    st.divider()

    if uploader is not None:
        with Image.open(uploader) as pil_image:
            with st.expander("Preview image"):
                st.image(pil_image, caption="Uploaded Image", use_container_width=True)

            st.success("Image uploaded successfully!")

            with st.spinner("Processing the image..."):
                resized_image = pil_image.resize((224, 224))

                if resized_image.mode != "RGB":
                    resized_image = resized_image.convert('RGB')
                
                np_image_uint8 = np.array(resized_image).astype("uint8")
                np_image_uint8 = np.clip(np_image_uint8, 0, 255).astype("uint8")

                np_image = np.array(resized_image).astype("float32")
                np_image /= 255.0

                # WHC:
                # input_data = np.expand_dims(np_image.transpose((1, 0, 2)), axis=0).astype(np.float32)

                # Standard HWC:
                input_data = np.expand_dims(np_image, axis=0).astype(np.float32)

                interpreter.set_tensor(input_details[0]['index'], input_data)
                interpreter.invoke()
                prediction = interpreter.get_tensor(output_details[0]['index'])

                # Output structure is [prob_non_ai, prob_ai]
                non_ai_prob = prediction[0][0]
                ai_prob = prediction[0][1]

                delta = non_ai_prob - ai_prob
                predicted_class_index = 1 if delta < 0 else 0
                predicted_class_name = "AI-Generated" if predicted_class_index == 1 else "Not AI-Generated"
                text = ""

                if predicted_class_index == 0:
                    text = f"### :green[Prediction: Likely {predicted_class_name}]"
                else:
                    text = f"### :red[Prediction: Likely {predicted_class_name}]"

                st.markdown("---")
                st.markdown("### Results")
                st.markdown(text)
                st.write(f"Probability of **Not AI-Generated**: {non_ai_prob*100:.2f}%")
                st.write(f"Probability of **AI-Generated**: {ai_prob*100:.2f}%")

                st.markdown("### Probability Overview")
                chart_data = pd.DataFrame(
                    {
                        "Probability": [non_ai_prob, ai_prob]
                    },
                    index=["Not AI-Generated", "AI-Generated"]
                )
                st.bar_chart(chart_data, height=300)
            
            st.markdown("---")
            st.markdown("### Characteristics")
            st.write("The image below shows the characteristics of the image that contributed to the model's prediction.")
            st.write("Shows image regions influencing the prediction, with segment boundaries.")
            st.write(":green[Green areas]: contribute to the fact that the image is likely to NOT be AI-generated.")
            st.write(":red[Red areas]: contribute to the fact that the image is likely to be AI-generated.")

            with st.spinner("Visualizing explanation..."):
                lime_explainer = lime_image.LimeImageExplainer(random_state=42)
                explanation = lime_explainer.explain_instance(
                    np_image_uint8,
                    predict_func,
                    top_labels=2,
                    hide_color=0,
                    num_samples=512
                )

                predicted_class_index = 1 if ai_prob > non_ai_prob else 0

                temp, mask = explanation.get_image_and_mask(
                    predicted_class_index,
                    positive_only=False,
                    num_features=10,
                    hide_rest=False
                )

                if temp.dtype == np.uint8:
                    temp_float = temp.astype(float) / 255.0
                else:
                    temp_float = np.clip(temp, 0.0, 1.0)

                marked_image = mark_boundaries(temp_float, mask, color=(1,0,1), mode='outer')
                st.image(marked_image, caption="LIME Explanation", use_container_width=True)

###
### Main
###

if __name__ == "__main__":
    render_home()